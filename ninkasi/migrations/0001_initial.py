# Generated by Django 4.2 on 2023-07-19 09:24

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nr', models.CharField(max_length=100, unique=True, verbose_name='Nr')),
                ('deliverydate', models.DateTimeField(blank=True, null=True, verbose_name='Delivery date')),
                ('color', models.CharField(blank=True, max_length=7, null=True, verbose_name='Color')),
            ],
            options={
                'verbose_name_plural': 'Batches',
                'ordering': ['nr'],
            },
        ),
        migrations.CreateModel(
            name='Brew',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='Time')),
                ('volume', models.FloatField(verbose_name='Volume in liters')),
            ],
            options={
                'verbose_name_plural': 'Brews',
                'ordering': ['batch__nr', 'date'],
            },
        ),
        migrations.CreateModel(
            name='Brewhouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Name')),
                ('volume', models.SmallIntegerField(verbose_name='Volume')),
            ],
            options={
                'verbose_name_plural': 'Brewhouses',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('synonyms', models.CharField(blank=True, max_length=255, null=True, verbose_name='Synonyms')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('descr', models.CharField(blank=True, max_length=200, null=True, verbose_name='Description')),
                ('volume', models.SmallIntegerField(verbose_name='Volume')),
            ],
            options={
                'verbose_name': 'Recipe',
                'verbose_name_plural': 'Recipes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Name')),
                ('volume', models.SmallIntegerField(verbose_name='Volume')),
                ('ttype', models.SmallIntegerField(choices=[(0, 'Fermentation'), (1, 'BBT'), (2, 'Lagering')], default=0, verbose_name='Type')),
            ],
            options={
                'verbose_name_plural': 'Tanks',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
            ],
            options={
                'verbose_name_plural': 'Units',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BBT',
            fields=[
                ('tank_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ninkasi.tank')),
            ],
            options={
                'verbose_name_plural': 'BBTs',
            },
            bases=('ninkasi.tank',),
        ),
        migrations.CreateModel(
            name='CCT',
            fields=[
                ('tank_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ninkasi.tank')),
            ],
            options={
                'verbose_name_plural': 'CCTs',
            },
            bases=('ninkasi.tank',),
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('asset_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ninkasi.asset')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=('ninkasi.asset',),
        ),
        migrations.CreateModel(
            name='LagerTank',
            fields=[
                ('tank_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ninkasi.tank')),
            ],
            options={
                'verbose_name_plural': 'Lager tanks',
            },
            bases=('ninkasi.tank',),
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='Date from')),
                ('end_date', models.DateTimeField(editable=False, verbose_name='Date to')),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.batch')),
                ('tank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.tank')),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Step',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('phase', models.SmallIntegerField(choices=[(0, 'Mash'), (1, 'Filtering'), (2, 'Boil'), (3, 'Whirlpool'), (4, 'Fermentation'), (5, 'Lagering')], verbose_name='Phase')),
                ('temperature', models.FloatField(verbose_name='Temperature')),
                ('duration', models.FloatField(verbose_name='Duration')),
                ('duration_unit', models.SmallIntegerField(choices=[(0, 'Minute'), (1, 'Hour'), (2, 'Day')], verbose_name='Duration unit')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('date', models.DateTimeField(verbose_name='Time')),
                ('notes', models.CharField(blank=True, max_length=200, null=True, verbose_name='Notes')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.step')),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.SmallIntegerField(choices=[(0, 'Acidity'), (1, 'DO'), (2, 'Gravity'), (3, 'CO2'), (4, 'FAN')], verbose_name='Quantity')),
                ('unit', models.SmallIntegerField(choices=[(0, 'Ph'), (1, 'PPM'), (2, 'SG')], verbose_name='Unit')),
                ('value', models.FloatField(verbose_name='Value')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.sample')),
            ],
        ),
        migrations.CreateModel(
            name='BrewStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(verbose_name='Start time')),
                ('end_time', models.DateTimeField(verbose_name='End time')),
                ('brew', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.brew')),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.step')),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='BrewAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(verbose_name='Amount')),
                ('batchnr', models.CharField(max_length=100, verbose_name='Batch Nr')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.asset')),
                ('brew', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.brew')),
            ],
        ),
        migrations.AddField(
            model_name='brew',
            name='asset',
            field=models.ManyToManyField(blank=True, null=True, through='ninkasi.BrewAsset', to='ninkasi.asset'),
        ),
        migrations.AddField(
            model_name='brew',
            name='batch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.batch'),
        ),
        migrations.AddField(
            model_name='brew',
            name='step',
            field=models.ManyToManyField(through='ninkasi.BrewStep', to='ninkasi.step'),
        ),
        migrations.CreateModel(
            name='BatchStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(verbose_name='Start time')),
                ('end_time', models.DateTimeField(verbose_name='End time')),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.batch')),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.step')),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='BatchAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(verbose_name='Amount')),
                ('batchnr', models.CharField(max_length=100, verbose_name='Batch Nr')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.asset')),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.batch')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.unit')),
            ],
        ),
        migrations.AddField(
            model_name='batch',
            name='asset',
            field=models.ManyToManyField(through='ninkasi.BatchAsset', to='ninkasi.asset'),
        ),
        migrations.AddField(
            model_name='batch',
            name='recipe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.recipe'),
        ),
        migrations.AddField(
            model_name='batch',
            name='step',
            field=models.ManyToManyField(through='ninkasi.BatchStep', to='ninkasi.step'),
        ),
        migrations.AddField(
            model_name='batch',
            name='tank',
            field=models.ManyToManyField(through='ninkasi.Transfer', to='ninkasi.tank'),
        ),
        migrations.AddField(
            model_name='asset',
            name='category',
            field=models.ManyToManyField(blank=True, to='ninkasi.category'),
        ),
        migrations.AddField(
            model_name='asset',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.unit'),
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(verbose_name='Amount')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.recipe')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.unit')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ninkasi.ingredient')),
            ],
        ),
        migrations.AddField(
            model_name='recipe',
            name='ingredient',
            field=models.ManyToManyField(through='ninkasi.RecipeIngredient', to='ninkasi.ingredient'),
        ),
    ]
